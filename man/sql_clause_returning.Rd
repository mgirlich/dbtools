% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql_clause.R
\name{sql_clause_returning}
\alias{sql_clause_returning}
\title{SQL RETURNING clause}
\usage{
sql_clause_returning(con, returning)
}
\arguments{
\item{con}{A DBIConnection object, as returned by \code{\link[DBI:dbConnect]{DBI::dbConnect()}}.}

\item{returning}{Specifies the columns to return. If \code{NULL} (the default)
you have to use \code{\link[DBI:dbExecute]{DBI::dbExecute()}} to execute the SQL statement.

If not \code{NULL} you have to use \code{\link[DBI:dbGetQuery]{DBI::dbGetQuery()}} to get the updated rows.
\code{returning} can be one of the following:
\itemize{
\item a (named) character vector of column names.
\item a (named) SQL vector (generated with \code{\link[=sql]{sql()}}). Note that only the
columns from \code{table} are visible, not the ones from \code{source}.
\item a list of scalar SQL and scalar character.
}

Names are used as the names of the returned columns. For example
\code{returning = list("id", time = sql("now()"))}
to return the column \code{id} and the current time in the column \code{time}.}
}
\value{
An SQL clause (a scalar object of class SQL). If \code{returning} is
\code{NULL} then \code{NULL} is also returned.
}
\description{
\code{sql_clause_returning()} adds a \code{RETURNING} clause to an existing SQL clause.
}
