% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql_insert_conflict.R
\name{sql_insert_missing}
\alias{sql_insert_missing}
\title{SQL for inserting missing values}
\usage{
sql_insert_missing(
  data,
  table,
  con,
  conflict_target = NULL,
  insert_cols = NULL,
  returning = NULL,
  return_all = FALSE
)
}
\arguments{
\item{data}{A data.frame.}

\item{table}{Name of the database table to insert to.}

\item{con}{A DBIConnection object, as returned by \code{\link[DBI:dbConnect]{DBI::dbConnect()}}.}

\item{conflict_target}{A conflict target generated by \code{\link[=sql_conflict_cols]{sql_conflict_cols()}}
or \code{\link[=sql_constraint]{sql_constraint()}}.}

\item{insert_cols}{Columns from table \code{data} to insert.}

\item{returning}{An \href{sql-expression-list}{SQL expression list} that specifies
which columns to return. Names are optional and used as column names in
the returned table. For the default \code{NULL} no rows are returned.}

\item{return_all}{A boolean that specifies whether only newly inserted rows
(\code{FALSE}, the default) are returned or also the matching, existing rows.}
}
\value{
An SQL query.
}
\description{
SQL for inserting missing values
}
\examples{
DBI::dbWriteTable(con, "dbtools_mtcars", mtcars[1, ], overwrite = TRUE)
DBI::dbExecute(
  con,
  'ALTER TABLE dbtools_mtcars
  ADD CONSTRAINT unique_const
  UNIQUE ("mpg", "cyl");'
)
sql_insert_missing(
  data = mtcars[c(1, 3), ],
  table = "dbtools_mtcars",
  con = con,
  conflict_target = sql_conflict_cols("mpg", "cyl"),
  returning = SQL("*"),
  return_all = TRUE
)
}
