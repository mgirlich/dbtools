% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql_insert_conflict.R
\name{sql_insert_missing}
\alias{sql_insert_missing}
\title{SQL for inserting missing values}
\usage{
sql_insert_missing(
  data,
  table,
  con,
  conflict_target,
  insert_cols = NULL,
  returning = NULL,
  return_all = FALSE,
  mode = "new"
)
}
\arguments{
\item{data}{a data.frame.}

\item{table}{name of the database table.}

\item{con}{a DBIConnection object, as returned by \code{\link[DBI:dbConnect]{DBI::dbConnect()}}.}

\item{conflict_target}{specifies the conflict target. This can be one of
the following:
\itemize{
\item a character vector of column names that should be unique.
When using this together with mode "new" there must be a unique constraint
on these columns.
\item a constraint name specified by \code{\link[=sql_constraint]{sql_constraint()}}.
}}

\item{insert_cols}{columns from \code{data} to insert.}

\item{returning}{specifies the columns to return. If \code{NULL} (the default)
the number of updated/inserted rows are returned.
This can be one of the following:
\itemize{
\item a character vector of column names.
\item a list of scalar SQL (generated with \code{\link[=SQL]{SQL()}}). Note that only the
columns from \code{table} are visible, not the ones from \code{source}.
\item a mixture of these two.
Names are used as the names of the returned columns. For example
\code{returning = list("id", time = SQL("now()"))}
will return a data.frame (or tibble if installed) with the columns
id and time.
}}

\item{return_all}{a boolean that specifies whether only newly inserted rows
(\code{FALSE}, the default) are returned or also the matching, existing rows.}

\item{mode}{specify how to check for a conflict:
\itemize{
\item "new": use the SQL "ON CONFLICT" clause.
\item "old": do not use the "ON CONFLICT" clause but an anti-join.
}}
}
\value{
An SQL query.
}
\description{
SQL for inserting missing values
}
\examples{
sql_insert_missing(
  data = mtcars[c(1, 3), ],
  table = "dbtools_mtcars",
  con = con,
  conflict_target = c("mpg", "cyl"),
  returning = SQL("*"),
  return_all = TRUE
)
}
